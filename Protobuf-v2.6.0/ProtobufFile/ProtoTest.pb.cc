// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoTest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoTest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ProtoTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoTest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoTest_2eproto() {
  protobuf_AddDesc_ProtoTest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoTest.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoTest_descriptor_ = file->message_type(0);
  static const int ProtoTest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTest, int32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTest, string_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTest, rpt_int32_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTest, rpt_string_value_),
  };
  ProtoTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoTest_descriptor_,
      ProtoTest::default_instance_,
      ProtoTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoTest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoTest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoTest_descriptor_, &ProtoTest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoTest_2eproto() {
  delete ProtoTest::default_instance_;
  delete ProtoTest_reflection_;
}

void protobuf_AddDesc_ProtoTest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ProtoTest.proto\"i\n\tProtoTest\022\023\n\013int32_"
    "value\030\001 \001(\005\022\024\n\014string_value\030\002 \001(\t\022\027\n\017rpt"
    "_int32_value\030\003 \003(\005\022\030\n\020rpt_string_value\030\004"
    " \003(\t", 124);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoTest.proto", &protobuf_RegisterTypes);
  ProtoTest::default_instance_ = new ProtoTest();
  ProtoTest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoTest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoTest_2eproto {
  StaticDescriptorInitializer_ProtoTest_2eproto() {
    protobuf_AddDesc_ProtoTest_2eproto();
  }
} static_descriptor_initializer_ProtoTest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProtoTest::kInt32ValueFieldNumber;
const int ProtoTest::kStringValueFieldNumber;
const int ProtoTest::kRptInt32ValueFieldNumber;
const int ProtoTest::kRptStringValueFieldNumber;
#endif  // !_MSC_VER

ProtoTest::ProtoTest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoTest)
}

void ProtoTest::InitAsDefaultInstance() {
}

ProtoTest::ProtoTest(const ProtoTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoTest)
}

void ProtoTest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  int32_value_ = 0;
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoTest::~ProtoTest() {
  // @@protoc_insertion_point(destructor:ProtoTest)
  SharedDtor();
}

void ProtoTest::SharedDtor() {
  if (string_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete string_value_;
  }
  if (this != default_instance_) {
  }
}

void ProtoTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoTest_descriptor_;
}

const ProtoTest& ProtoTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoTest_2eproto();
  return *default_instance_;
}

ProtoTest* ProtoTest::default_instance_ = NULL;

ProtoTest* ProtoTest::New() const {
  return new ProtoTest;
}

void ProtoTest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    int32_value_ = 0;
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        string_value_->clear();
      }
    }
  }
  rpt_int32_value_.Clear();
  rpt_string_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 int32_value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int32_value_)));
          set_has_int32_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_string_value;
        break;
      }

      // optional string string_value = 2;
      case 2: {
        if (tag == 18) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "string_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rpt_int32_value;
        break;
      }

      // repeated int32 rpt_int32_value = 3;
      case 3: {
        if (tag == 24) {
         parse_rpt_int32_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_rpt_int32_value())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rpt_int32_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rpt_int32_value;
        if (input->ExpectTag(34)) goto parse_rpt_string_value;
        break;
      }

      // repeated string rpt_string_value = 4;
      case 4: {
        if (tag == 34) {
         parse_rpt_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_rpt_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rpt_string_value(this->rpt_string_value_size() - 1).data(),
            this->rpt_string_value(this->rpt_string_value_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rpt_string_value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rpt_string_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoTest)
  return false;
#undef DO_
}

void ProtoTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoTest)
  // optional int32 int32_value = 1;
  if (has_int32_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->int32_value(), output);
  }

  // optional string string_value = 2;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->string_value(), output);
  }

  // repeated int32 rpt_int32_value = 3;
  for (int i = 0; i < this->rpt_int32_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->rpt_int32_value(i), output);
  }

  // repeated string rpt_string_value = 4;
  for (int i = 0; i < this->rpt_string_value_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->rpt_string_value(i).data(), this->rpt_string_value(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "rpt_string_value");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rpt_string_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoTest)
}

::google::protobuf::uint8* ProtoTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoTest)
  // optional int32 int32_value = 1;
  if (has_int32_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->int32_value(), target);
  }

  // optional string string_value = 2;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->string_value(), target);
  }

  // repeated int32 rpt_int32_value = 3;
  for (int i = 0; i < this->rpt_int32_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->rpt_int32_value(i), target);
  }

  // repeated string rpt_string_value = 4;
  for (int i = 0; i < this->rpt_string_value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rpt_string_value(i).data(), this->rpt_string_value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rpt_string_value");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->rpt_string_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoTest)
  return target;
}

int ProtoTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 int32_value = 1;
    if (has_int32_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32_value());
    }

    // optional string string_value = 2;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

  }
  // repeated int32 rpt_int32_value = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->rpt_int32_value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rpt_int32_value(i));
    }
    total_size += 1 * this->rpt_int32_value_size() + data_size;
  }

  // repeated string rpt_string_value = 4;
  total_size += 1 * this->rpt_string_value_size();
  for (int i = 0; i < this->rpt_string_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->rpt_string_value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoTest::MergeFrom(const ProtoTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  rpt_int32_value_.MergeFrom(from.rpt_int32_value_);
  rpt_string_value_.MergeFrom(from.rpt_string_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_int32_value()) {
      set_int32_value(from.int32_value());
    }
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoTest::CopyFrom(const ProtoTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoTest::IsInitialized() const {

  return true;
}

void ProtoTest::Swap(ProtoTest* other) {
  if (other != this) {
    std::swap(int32_value_, other->int32_value_);
    std::swap(string_value_, other->string_value_);
    rpt_int32_value_.Swap(&other->rpt_int32_value_);
    rpt_string_value_.Swap(&other->rpt_string_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoTest_descriptor_;
  metadata.reflection = ProtoTest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
